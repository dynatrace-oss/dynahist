plugins {
	id 'java-library'
	id 'jacoco'
	id 'me.champeau.jmh' version '0.7.1'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'com.diffplug.spotless' version '6.18.0'
	id 'maven-publish'
	id 'signing'
	id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

static def readJavaLicense(licenseName) {
	File licenseFile = new File('licenses/' + licenseName + '.txt')
	def line
	def s = '/*\n'
	licenseFile.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			s += ' *'
			if(!line.isEmpty()) {
				s += ' '
				s += line
			}
			s += '\n'
		}
	}
	s += ' */'
	return s
}

static def readPythonLicense(licenseName) {
	File licenseFile = new File('licenses/' + licenseName + '.txt')
	def line
	def s = '#\n'
	licenseFile.withReader { reader ->
		while ((line = reader.readLine()) != null) {
			s += '#'
			if(!line.isEmpty()) {
				s += ' '
				s += line
			}
			s += '\n'
		}
	}
	s += '#'
	return s
}


java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(11))
	}
	withJavadocJar()
	withSourcesJar()
}

group = 'com.dynatrace.dynahist'
version = '1.4'

spotless {
	ratchetFrom 'origin/main'
	apply plugin: 'groovy'
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse('4.26')
	}
	python {
		target 'charts/charts.py'
		black('23.1.0')
		licenseHeader readPythonLicense('APACHE_2_0_DYNATRACE'), '(import|from)'
	}
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat('1.16.0')
		licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE')
	}
}

sonarqube {
	properties {
		property 'sonar.projectKey', 'dynatrace-oss_dynahist'
		property 'sonar.organization', 'dynatrace-oss'
		property 'sonar.host.url', 'https://sonarcloud.io'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.3'
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.3'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.9.3'
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
	jmh group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.12'
	jmh group: 'com.datadoghq', name: 'sketches-java', version: '0.8.1'
	jmh group: 'org.openjdk.jol', name: 'jol-core', version: '0.16'
	jmh group: 'com.newrelic', name: 'nrsketch', version: '1.1'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	// necessary for sonarcloud coverage
	reports {
		xml.required = true
		csv.required = true
	}
}

jmh {
	fork = 1
	timeUnit = 'ms'
	failOnError = false
	timeOnIteration = '1s'
	warmupForks = 1
	warmupIterations = 3
	warmupBatchSize = 1
	warmup = '1s'
	iterations = 10
}

task copyBenchmarkReport(type: Copy) {
	rename ('results.txt', 'results ' + new Date().format('yyyy-MM-dd-HH-mm-ss') +'.txt')
	from file('build/results/jmh/results.txt')
	into file('benchmark-results/')
}
tasks.test.finalizedBy jacocoTestReport

tasks.jmh.finalizedBy copyBenchmarkReport
check.dependsOn jacocoTestCoverageVerification

sourceSets {
	jmh
	main
	test
}


javadoc {
	failOnError true
	title 'dynahist ' + project.version + ' API'
}

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 1.0
				counter = 'LINE'
			}
			limit {
				minimum = 1.0
				counter = 'BRANCH'
			}
		}
	}
}

task spaceConsumptionBenchmark(type: JavaExec) {
	group = "Benchmark"
	description = "Runs the space consumption benchmark"
	classpath = sourceSets.jmh.runtimeClasspath
	mainClass = "com.dynatrace.dynahist.SpaceConsumptionBenchmark"
}

task recordingSpeedBenchmark {
	group = "Benchmark"
	description = "Runs the recording speed benchmark"
	dependsOn "jmh"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			pom {
				name = 'com.dynatrace.dynahist:dynahist'
				description = 'DynaHist: A Dynamic Histogram Library for Java'
				url = 'https://github.com/dynatrace-oss/dynahist'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'Dynatrace'
						name = 'Dynatrace LLC'
						email = 'opensource@dynatrace.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/dynatrace-oss/dynahist.git'
					developerConnection = 'scm:git:ssh://github.com/dynatrace-oss/dynahist.git'
					url = 'https://github.com/dynatrace-oss/dynahist'
				}
			}
		}
	}
}

signing {
	useInMemoryPgpKeys(System.getenv('GPG_PRIVATE_KEY'), System.getenv('GPG_PASSPHRASE'))
	sign publishing.publications.mavenJava
}

nexusPublishing {
	packageGroup = 'com.dynatrace'
	useStaging = true
	repositories {
		sonatype {
			nexusUrl = uri('https://oss.sonatype.org/service/local/')
			snapshotRepositoryUrl = uri('https://oss.sonatype.org/content/repositories/snapshots/')
			username = System.getenv('OSSRH_USERNAME')
			password = System.getenv('OSSRH_PASSWORD')
		}
	}
}