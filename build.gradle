plugins {
    id 'java-library'
    id 'jacoco'
    id 'me.champeau.jmh' version '0.7.2'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id "com.palantir.revapi" version "1.7.0"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.3'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.2'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'
    jmh group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.12'
    jmh group: 'com.datadoghq', name: 'sketches-java', version: '0.8.2'
    jmh group: 'org.openjdk.jol', name: 'jol-core', version: '0.17'
    jmh group: 'com.newrelic', name: 'nrsketch', version: '1.2'
}

def readJavaLicense = licenseName -> {
    File licenseFile = new File('licenses/' + licenseName + '.txt')
    def line
    def s = '/*\n'
    licenseFile.withReader { reader ->
        while ((line = reader.readLine()) != null) {
            s += ' *'
            if(!line.isEmpty()) {
                s += ' '
                s += line
            }
            s += '\n'
        }
    }
    s += ' */'
    return s
}

def readPythonLicense = licenseName -> {
    File licenseFile = new File('licenses/' + licenseName + '.txt')
    def line
    def s = '#\n'
    licenseFile.withReader { reader ->
        while ((line = reader.readLine()) != null) {
            s += '#'
            if(!line.isEmpty()) {
                s += ' '
                s += line
            }
            s += '\n'
        }
    }
    s += '#'
    return s
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
    withJavadocJar()
    withSourcesJar()
}

group = 'com.dynatrace.dynahist'
version = '1.4'

spotless {
    ratchetFrom 'origin/main'
    python {
        target 'python/**/*.py'
        black('24.3.0')
        licenseHeader readPythonLicense('APACHE_2_0_DYNATRACE'), '(import|from)'
    }
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat('1.17.0')
        licenseHeader readJavaLicense('APACHE_2_0_DYNATRACE')
        targetExclude 'src/main/java/com/dynatrace/hash4j/hashing/Komihash4_3.java','src/main/java/com/dynatrace/hash4j/random/SplitMix64V1.java','src/main/java/com/dynatrace/hash4j/random/RandomExponentialUtil.java'
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'dynatrace-oss_dynahist'
        property 'sonar.organization', 'dynatrace-oss'
        property 'sonar.host.url', 'https://sonarcloud.io'
    }
}


jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
    }
}

test {
    useJUnitPlatform()
}

jmh {
    fork = 1
    timeUnit = 'us'
    failOnError = false
    timeOnIteration = '1s'
    warmupForks = 1
    warmupIterations = 3
    warmupBatchSize = 1
    warmup = '1s'
    iterations = 10
    resultFormat = 'JSON'
}

task evaluateBenchmarks(type:Exec) {
    group "evaluation"
    workingDir '.'
    commandLine 'python', 'python/benchmark_evaluation.py'
}

tasks.register('checkStatusForBenchmarks') {
    outputs.upToDateWhen { false }
    doLast {
        def status_text = "git status --porcelain".execute().text
        if(status_text?.trim()) {
            throw new GradleException('There are uncommitted changes:\n' + status_text)
        }
    }
}

tasks.register('copyBenchmarkReport', Copy) {
    def proc = "git rev-parse HEAD".execute()
    def revision = proc.text.trim()
    from('build/results/jmh/') {
        include 'results.*'
        rename 'results', new Date().format('yyyy-MM-dd-HH-mm-ss') + ' ' + revision
    }
    into 'benchmark-results'
}

tasks.register('deleteBenchmarkReport', Delete) {
    delete 'build/results/jmh/results.json'
}

tasks.test.finalizedBy jacocoTestReport
tasks.jmh.finalizedBy copyBenchmarkReport
tasks.copyBenchmarkReport.finalizedBy deleteBenchmarkReport
tasks.deleteBenchmarkReport.finalizedBy evaluateBenchmarks
check.dependsOn jacocoTestCoverageVerification
tasks.jmh.dependsOn checkStatusForBenchmarks
tasks.copyBenchmarkReport.dependsOn checkStatusForBenchmarks

sourceSets {
    jmh
    main
    test
}


javadoc {
    failOnError true
    title 'dynahist ' + project.version + ' API'
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.0
                counter = 'LINE'
            }
            limit {
                minimum = 1.0
                counter = 'BRANCH'
            }
        }
    }
}

task spaceConsumptionBenchmark(type: JavaExec) {
    group = "Benchmark"
    description = "Runs the space consumption benchmark"
    classpath = sourceSets.jmh.runtimeClasspath
    mainClass = "com.dynatrace.dynahist.SpaceConsumptionBenchmark"
}

task recordingSpeedBenchmark {
    group = "Benchmark"
    description = "Runs the recording speed benchmark"
    dependsOn "jmh"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'com.dynatrace.dynahist:dynahist'
                description = 'DynaHist: A Dynamic Histogram Library for Java'
                url = 'https://github.com/dynatrace-oss/dynahist'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Dynatrace'
                        name = 'Dynatrace LLC'
                        email = 'opensource@dynatrace.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/dynatrace-oss/dynahist.git'
                    developerConnection = 'scm:git:ssh://github.com/dynatrace-oss/dynahist.git'
                    url = 'https://github.com/dynatrace-oss/dynahist'
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(System.getenv('GPG_PRIVATE_KEY'), System.getenv('GPG_PASSPHRASE'))
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = 'com.dynatrace'
    useStaging = true
    repositories {
        sonatype {
            nexusUrl = uri('https://oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://oss.sonatype.org/content/repositories/snapshots/')
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
        }
    }
}
